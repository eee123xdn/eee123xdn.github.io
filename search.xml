<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python前言</title>
      <link href="/2022/08/09/python%E5%89%8D%E8%A8%80/"/>
      <url>/2022/08/09/python%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="1-随便说点"><a href="#1-随便说点" class="headerlink" title="1.随便说点"></a>1.随便说点</h2><p>三年来大多数时间都花在写C++上，虽然之前做过java,python的小项目，但是过段时间不用，语法就忘了很多，而且一直以来并没有系统学过，导致一个问题:别人让写一个python的作业或者项目时，知道自己可以完成，但是无法预估出需要花多少时间，会有心虚感，而不比当时C++完成一个编译原理课设，知道自己几天完成，差不多就几天写完。那光学点基础的语法和一些包的应用，够吗？显然不行。那接下来还是像我当初熟练C++一样，先用python写数据结构与基本的算法练熟，再学习各种框架怎么写吧。</p><h2 id="2-python的一些基础小问题"><a href="#2-python的一些基础小问题" class="headerlink" title="2.python的一些基础小问题"></a>2.python的一些基础小问题</h2><p>基础语法里面也有一些和C++不同，传参当时确实坑了我一把<br>2.1 <a href="https://blog.csdn.net/xyl99520/article/details/125853623">python传参时避免参数改变</a><br>2.2 <a href="https://blog.csdn.net/xyl99520/article/details/125854730">python中的self和init</a><br>类属性和对象属性写在不同位置也是不一样的<br>2.3 <a href="https://blog.csdn.net/xyl99520/article/details/125854997">python构造类和对象</a></p><h2 id="3-写了两场简单的cf，更熟悉一点"><a href="#3-写了两场简单的cf，更熟悉一点" class="headerlink" title="3.写了两场简单的cf，更熟悉一点"></a>3.写了两场简单的cf，更熟悉一点</h2><p>3.1 <a href="https://blog.csdn.net/xyl99520/article/details/125831080">Codeforces Round #806 (Div. 4)A-E–python</a><br>3.2 <a href="https://blog.csdn.net/xyl99520/article/details/126216342">Codeforces Round #812 (Div. 2)A-C–python</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python递归与查找</title>
      <link href="/2022/08/08/python%E9%80%92%E5%BD%92%E4%B8%8E%E6%9F%A5%E6%89%BE/"/>
      <url>/2022/08/08/python%E9%80%92%E5%BD%92%E4%B8%8E%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="1-递归：汉诺塔问题"><a href="#1-递归：汉诺塔问题" class="headerlink" title="1.递归：汉诺塔问题"></a>1.递归：汉诺塔问题</h2><pre class=" language-hannuota.py"><code class="language-hannuota.py">import mathimport osimport collectionsimport sysdef hannuota(n, a, b, c):    if n > 0:        hannuota(n - 1, a, c, b)        print("%s->%s" % (a, c))        hannuota(n - 1, b, a, c)hannuota(3, 'A', 'B', 'C')</code></pre><p>移动次数转移方程 dp[n]=2*dp[n-1]+1   </p><h2 id="2-顺序查找"><a href="#2-顺序查找" class="headerlink" title="2.顺序查找"></a>2.顺序查找</h2><pre class=" language-line_search.py"><code class="language-line_search.py">import mathimport osimport collectionsimport sysdef line_search(li,val):    for i in range(len(li)):        if(li[i]==val):            return i    return Nonex=[2,7,1,6,4]index1=line_search(x,6)print(index1)    </code></pre><p>当然，也有内置的index函数</p><pre class=" language-indexfunc.py"><code class="language-indexfunc.py">aList = [123, 'xyz', 'runoob', 'abc']print("xyz 索引位置: ", aList.index('xyz'))print("runoob 索引位置 : ", aList.index('runoob', 1, 3))</code></pre><h2 id="3-二分查找"><a href="#3-二分查找" class="headerlink" title="3.二分查找"></a>3.二分查找</h2><p>下面两个函数分别能够查找最左边和最右边满足条件的<br>当然，二分查找前提需要数组有序</p><pre class=" language-erfen_search.py"><code class="language-erfen_search.py">import mathdef erfen_search1(li,val):    l,r=0,len(li)-1    while l<r:        mid=(l+r)>>1        if li[mid]>=val:            r=mid        else:            l=mid+1    if li[l]==val:        return l    else:        return -1def erfen_search2(li,val):    l,r=0,len(li)-1    while l<r:        mid=(l+r+1)>>1        if li[mid]<=val:            l=mid        else:            r=mid-1    if li[l]==val:        return l    else:        return -1x=[1,2,3,3,3,4,5,6,7,7]index1=erfen_search1(x,3)print("最左边等于3的数的下标%d" % index1)index2=erfen_search2(x,3)print("最右边等于3的数的下标%d" % index2)</code></pre><p>二分查找也有内置的函数，和lower_bound和upper_bound一样<br><a href="https://blog.csdn.net/YMWM_/article/details/122378152">参考链接</a></p><pre class=" language-bisect.py"><code class="language-bisect.py">import mathimport bisectx=[1,2,3,3,3,4,5,6,7,7]index1=bisect.bisect_left(x,3)index2=bisect.bisect_right(x,3)print("第一个大于等于3的数的下标%d" % index1)print("第一个大于3的数的下标%d" % index2)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python数据结构与算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习数学基础</title>
      <link href="/2022/08/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/08/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%95%B0%E5%AD%A6%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 数学基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>神经网络与深度学习绪论</title>
      <link href="/2022/08/08/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%BB%AA%E8%AE%BA/"/>
      <url>/2022/08/08/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%8E%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E7%BB%AA%E8%AE%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="1-路线"><a href="#1-路线" class="headerlink" title="1.路线"></a>1.路线</h2><p><img src="https://s3.bmp.ovh/imgs/2022/08/08/838008e089ea0cf5.png"></p><h2 id="2-深度学习与表示学习"><a href="#2-深度学习与表示学习" class="headerlink" title="2.深度学习与表示学习"></a>2.深度学习与表示学习</h2><p><img src="https://s3.bmp.ovh/imgs/2022/08/08/aacb3a4245fe8b54.png"></p><h2 id="3-语义表示（独热表示与分布式表示）"><a href="#3-语义表示（独热表示与分布式表示）" class="headerlink" title="3.语义表示（独热表示与分布式表示）"></a>3.语义表示（独热表示与分布式表示）</h2><p><img src="https://s3.bmp.ovh/imgs/2022/08/08/e79a201fef0a31ec.png"><br><img src="https://s3.bmp.ovh/imgs/2022/08/08/db0ddb1a6ab8315a.png"></p><h2 id="4-神经元模型"><a href="#4-神经元模型" class="headerlink" title="4.神经元模型"></a>4.神经元模型</h2><p>这个模型就是模仿大脑，接收其他神经元传来的刺激，每个都赋一个权值，然后和产生刺激的阈值比较<br><img src="https://s3.bmp.ovh/imgs/2022/08/08/f8b90f522c4f2c81.png"></p><h2 id="5-人工神经网络"><a href="#5-人工神经网络" class="headerlink" title="5.人工神经网络"></a>5.人工神经网络</h2><p><img src="https://s3.bmp.ovh/imgs/2022/08/08/6f86ebfa497af24d.png"><br>贡献度就可以用偏导数来表示，偏导值越大，贡献占比越大</p><h2 id="6-需要的数学基础"><a href="#6-需要的数学基础" class="headerlink" title="6.需要的数学基础"></a>6.需要的数学基础</h2><p><a href="https://www.bilibili.com/video/BV1Yg411X7gw?spm_id_from=333.337.search-card.all.click&vd_source=a647ee5114ce65eae6f65468f4ff0eb8">数学学习链接</a><br><a href="https://www.bilibili.com/video/BV1uA411N7c5?p=51&vd_source=a647ee5114ce65eae6f65468f4ff0eb8">python基础练习</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 神经网络与深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习概述</title>
      <link href="/2022/08/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/08/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 深度学习与神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fpga学习第一节（组合逻辑）.md</title>
      <link href="/2022/08/05/fpga%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E8%8A%82/"/>
      <url>/2022/08/05/fpga%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<h1 id="Xilinx-FPGA学习第一节"><a href="#Xilinx-FPGA学习第一节" class="headerlink" title="Xilinx FPGA学习第一节"></a>Xilinx FPGA学习第一节</h1><h2 id="1-FPGA开发流程"><a href="#1-FPGA开发流程" class="headerlink" title="1. FPGA开发流程"></a>1. FPGA开发流程</h2><ul><li>设计定义</li><li>设计输入</li><li>分析综合（EDA软件，得到逻辑门级别的电路内容）</li><li>功能仿真（modelsim）</li><li>布局布线（vivado、quartus）</li><li>分析性能（时序仿真modelsim或者静态时序分析vivado、quartus）</li><li>板级调试  </li></ul><h2 id="2-二选一多路选择器实现"><a href="#2-二选一多路选择器实现" class="headerlink" title="2. 二选一多路选择器实现"></a>2. 二选一多路选择器实现</h2><h3 id="2-1-设计"><a href="#2-1-设计" class="headerlink" title="2.1 设计"></a>2.1 设计</h3><p><img src="https://s3.bmp.ovh/imgs/2022/08/05/9edd1c31d1e7c1c3.jpg"></p><h3 id="2-2-编写设计代码mux2-v"><a href="#2-2-编写设计代码mux2-v" class="headerlink" title="2.2 编写设计代码mux2.v"></a>2.2 编写设计代码mux2.v</h3><pre class=" language-mux2.v"><code class="language-mux2.v">module mux2(    a,    b,    sel,    out);    input a;    input b;    input sel;    output out;        assign out = (sel==1)?a:b;endmodule</code></pre><h3 id="2-3-Run-Synthesis-分析综合"><a href="#2-3-Run-Synthesis-分析综合" class="headerlink" title="2.3 Run Synthesis 分析综合"></a>2.3 Run Synthesis 分析综合</h3><h3 id="2-4-功能仿真"><a href="#2-4-功能仿真" class="headerlink" title="2.4 功能仿真"></a>2.4 功能仿真</h3><h4 id="2-4-1-仿真原理图"><a href="#2-4-1-仿真原理图" class="headerlink" title="2.4.1 仿真原理图"></a>2.4.1 仿真原理图</h4><p><img src="https://s3.bmp.ovh/imgs/2022/08/05/c70fa874be2dea65.jpg"></p><h4 id="2-4-2-编写仿真代码-mux2-tb-test-bench"><a href="#2-4-2-编写仿真代码-mux2-tb-test-bench" class="headerlink" title="2.4.2 编写仿真代码 mux2_tb(test_bench)"></a>2.4.2 编写仿真代码 mux2_tb(test_bench)</h4><pre class=" language-mux2_tb.v"><code class="language-mux2_tb.v">`timescale  1ns / 1ns//两个1ns含义不一样，第一个是以ns为单位，比如延时200ns:#200；//第二个ns是精度module mux2_tb();   reg s_a;   reg s_b;   reg s_sel;   wire out;      mux2 mux2_inst(  //mux2_inst相当于mux2的代号    .a(s_a),  //s_a是a连接的信号线    .b(s_b),    .sel(s_sel),    .out(out)   );      initial begin      s_a=0;s_b=0;s_sel=0;      #200;      s_a=0;s_b=0;s_sel=1;      #200;      s_a=0;s_b=1;s_sel=0;      #200;      s_a=0;s_b=1;s_sel=1;      #200;      s_a=1;s_b=0;s_sel=0;      #200;      s_a=1;s_b=0;s_sel=1;      #200;      s_a=1;s_b=1;s_sel=0;      #200;      s_a=1;s_b=1;s_sel=1;      #200;      $stop;   endendmodule</code></pre><h4 id="2-4-3-Run-simulation-点击第一个功能仿真"><a href="#2-4-3-Run-simulation-点击第一个功能仿真" class="headerlink" title="2.4.3 Run simulation 点击第一个功能仿真"></a>2.4.3 Run simulation 点击第一个功能仿真</h4><p><img src="https://s3.bmp.ovh/imgs/2022/08/05/a316449d90350d67.jpg"></p><h3 id="2-5-布局布线"><a href="#2-5-布局布线" class="headerlink" title="2.5 布局布线"></a>2.5 布局布线</h3><h4 id="2-5-1-Run-Implementation"><a href="#2-5-1-Run-Implementation" class="headerlink" title="2.5.1 Run Implementation"></a>2.5.1 Run Implementation</h4><h4 id="2-5-2-时序仿真-Run-simulation-点击最后一个时序仿真"><a href="#2-5-2-时序仿真-Run-simulation-点击最后一个时序仿真" class="headerlink" title="2.5.2 时序仿真 Run simulation 点击最后一个时序仿真"></a>2.5.2 时序仿真 Run simulation 点击最后一个时序仿真</h4><p><img src="https://s3.bmp.ovh/imgs/2022/08/05/c899b38b774395c7.jpg"><br>可以看到400ns时out还没变，而是400ns多一点才变的</p><h4 id="2-5-3-添加约束文件并保存"><a href="#2-5-3-添加约束文件并保存" class="headerlink" title="2.5.3 添加约束文件并保存"></a>2.5.3 添加约束文件并保存</h4><p>Layout I/O.Planning<br><img src="https://s3.bmp.ovh/imgs/2022/08/05/5cddea62898c1d4a.jpg"><br>xdc文件里面可查看</p><h3 id="2-6-板级调试"><a href="#2-6-板级调试" class="headerlink" title="2.6 板级调试"></a>2.6 板级调试</h3><p>1.产生比特流<br>2.点击Open Hardware Manager，然后点击Open target的Auto connect<br>3.program device<br>4.拨开关<br><img src="https://s3.bmp.ovh/imgs/2022/08/05/7e2e363616f951c3.jpg"><br>如上图，sw0代表a,sw1代表b,sw7代表sel,led0代表out<br>sw7上拨，sw0上拨，led就亮了</p><h2 id="3-3-8译码器"><a href="#3-3-8译码器" class="headerlink" title="3. 3-8译码器"></a>3. 3-8译码器</h2><h3 id="3-1-逻辑设计"><a href="#3-1-逻辑设计" class="headerlink" title="3.1 逻辑设计"></a>3.1 逻辑设计</h3><p><img src="https://s3.bmp.ovh/imgs/2022/08/05/f8055d5063fba239.jpg"></p><h3 id="3-2-设计输入-decoder-3-8-v"><a href="#3-2-设计输入-decoder-3-8-v" class="headerlink" title="3.2 设计输入 decoder_3_8.v"></a>3.2 设计输入 decoder_3_8.v</h3><pre class=" language-decoder_3_8.v"><code class="language-decoder_3_8.v">`timescale 1ns / 1ps//////////////////////////////////////////////////////////////////////////////////// Company: // Engineer: // // Create Date: 2022/08/06 11:28:17// Design Name: // Module Name: decoder_3_8// Project Name: // Target Devices: // Tool Versions: // Description: // // Dependencies: // // Revision:// Revision 0.01 - File Created// Additional Comments:// //////////////////////////////////////////////////////////////////////////////////module decoder_3_8(    a,    b,    c,    out    );    input a;    input b;    input c;    output reg[7:0] out;        //always或者initial的左值必须是reg类型    //assign左值类型是wire    //&#123;a,b,c&#125;是指三个一位拼接成一个三位    //比如 wire [3:0]d    // assign d=&#123;a,1'b0,b,c&#125;    always@(*)begin       case(&#123;a,b,c&#125;)           3'd0: out=8'b00000001;           3'd1: out=8'b00000010;           3'd2: out=8'b00000100;           3'd3: out=8'b00001000;           3'd4: out=8'b00010000;           3'd5: out=8'b00100000;           3'd6: out=8'b01000000;           3'd7: out=8'b10000000;       endcase    endendmodule</code></pre><h3 id="3-3-跑综合，语法没问题"><a href="#3-3-跑综合，语法没问题" class="headerlink" title="3.3 跑综合，语法没问题"></a>3.3 跑综合，语法没问题</h3><h3 id="3-4-写仿真文件-decoder-3-8-tb-v"><a href="#3-4-写仿真文件-decoder-3-8-tb-v" class="headerlink" title="3.4 写仿真文件 decoder_3_8_tb.v"></a>3.4 写仿真文件 decoder_3_8_tb.v</h3><pre class=" language-decoder_3_8_tb.v"><code class="language-decoder_3_8_tb.v">`timescale 1ns / 1psmodule decoder_3_8_tb();          reg s_a;     reg s_b;     reg s_c;     wire [7:0]out;     decoder_3_8 decoder_3_8_inst(        .a(s_a),        .b(s_b),        .c(s_c),        .out(out)    );        initial begin      s_a=0;s_b=0;s_c=0;      #200;      s_a=0;s_b=0;s_c=1;      #200;      s_a=0;s_b=1;s_c=0;      #200;      s_a=0;s_b=1;s_c=1;      #200;      s_a=1;s_b=0;s_c=0;      #200;      s_a=1;s_b=0;s_c=1;      #200;      s_a=1;s_b=1;s_c=0;      #200;      s_a=1;s_b=1;s_c=1;      #200;      $stop;    endendmodule</code></pre><h3 id="3-5-功能仿真"><a href="#3-5-功能仿真" class="headerlink" title="3.5 功能仿真"></a>3.5 功能仿真</h3><p><img src="https://s3.bmp.ovh/imgs/2022/08/06/a3fd636b6c80f3f2.jpg"><br>结果没问题</p><h3 id="3-6-布局布线，然后schematic"><a href="#3-6-布局布线，然后schematic" class="headerlink" title="3.6 布局布线，然后schematic"></a>3.6 布局布线，然后schematic</h3><h3 id="3-7-时序仿真（该程序比较简单，这个就不做了）"><a href="#3-7-时序仿真（该程序比较简单，这个就不做了）" class="headerlink" title="3.7 时序仿真（该程序比较简单，这个就不做了）"></a>3.7 时序仿真（该程序比较简单，这个就不做了）</h3><h3 id="3-8-设置引脚"><a href="#3-8-设置引脚" class="headerlink" title="3.8 设置引脚"></a>3.8 设置引脚</h3><h3 id="3-9-写比特流"><a href="#3-9-写比特流" class="headerlink" title="3.9 写比特流"></a>3.9 写比特流</h3><h3 id="3-10-板级调试"><a href="#3-10-板级调试" class="headerlink" title="3.10 板级调试"></a>3.10 板级调试</h3><p><img src="https://s3.bmp.ovh/imgs/2022/08/06/e27152cc7fac241f.jpg"></p><p>以前畏惧硬件，现在感觉还是蛮有意思^_^</p>]]></content>
      
      
      
        <tags>
            
            <tag> fpga学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
